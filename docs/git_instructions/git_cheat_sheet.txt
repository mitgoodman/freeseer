Andrew's Freeseer git cheat sheet, version 2

Please use the following as a guide to set up your work area and keep it up to date with the latest changes.

If you don't have one already, create your github account, upload your public ssh key to automatically authorize your laptop/desktop account to work with the code, and log in

visit http://github.com/Freeseer/freeseer , click fork to create your own copy of the project on github.com. You have commit access right away to this. No permission needed.

Create a work area using "git clone <your fork url>". Your url will be visible when you click source. You have a choice of git, ssh, or http URLs. I like to use the ssh one myself.
# cd into the directory created by the git clone command

# set up a remote to the upstream and pull
git remote add upstream git://github.com/Freeseer/freeseer.git
git pull upstream

# create a local branch which parallels development in the upstream repository. Never make changes in this branch and it'll be trivial to keep up to date with "git pull"
# call this import to make it clear it's incoming code
git checkout -b import upstream/development
(You can pull direct from upstream without creating a local branch, but it's handy to know how to create a branch of something in some other repository so you can compare even when offline.)

# create a local branch for you to work in
git checkout -b mywork import
(feel free to use a more specific name than mywork. If you do, change the name below too.)

# confirm which branch you're in with
git branch

# if you're not in the right one, you can git checkout <branch> to switch to it. For merges, you want to be in the branch you're bringing content into. For instance for mywork
git checkout mywork


# When you're network connected, you get the latest code from upstream with
git rebase upstream/development import
(run this often)

# Once you have the latest code in your import branch, you can then update your working branch with:
git rebase import mywork
(This technique peels off your changes, updates the code from upstream with no conflicts, and then replays your work. Thus you should only see conflicts when
 stuff actually conflicts with your work. This is also good to run often.)


# Another slightly less sophisticated (and therefor perhaps more likely to have conflicts) way of updating is the following
# merge the latest from import to where you're working
git checkout mywork
git merge --no-ff import

# Best to push your branch back up to your fork so that they're visble/preserved
git push origin mywork:mywork
(future pushes you can just do a git push since git caches the information)

To work, just edit files as you would normally. "git status" will show you what's changed. "git diff <filename>" shows the difference.

To tell git you want to include a change for commit, use "git add <filename>". Once you're ready to commit, use git commit -m "<message>" The message should be a useful one describing your change. You can also write the details in a file and refer to the file if you wish in your git commit statement.

You can always un-do a change at any time so commits are cheap and best practice to avoid losing work. To ensure your changes are backed up, be sure to commit often, and push.

Everything you do is in your private sandbox (your fork) unless someone pulls it and pushes it elsewhere. Pull often to avoid big/many conflicts down the road.


When you commit:

To make our issue tracker more useful, and automatically update it when we fix something, please use the following in your commit messages:

Closes #NN.

Where NN is the number of the issue you fixed. This will automatically close the issue, and add a link to the commit that fixed it.

For example:

git commit -m "Fixed recording issue with vga2usb on Fedora 17 Linux. Closes #721"
